[{"type":"tab","id":"69a52aa4.965ad4","label":"Sheet 1"},{"id":"fa6f7682.059088","type":"subflow","name":"RH-USB","info":"## RH-USB Subflow\n\nThis subflow uses the serial input and serial output nodes to query the \n[Omega RH-USB](http://www.omega.com/pptst/RH-USB.html) temperature and humidity\nsensor.\n\nThe two outputs correspond to:\n\n* Temperature in degrees Fahrenheit\n* Relative humidity in %\n\n**Note:** Only use this subflow once for a given sensor, since it uses a serial\nrequest and response to acquire the values. Multiple uses will result in\nunexpected results.","in":[{"x":64,"y":58,"wires":[{"id":"6e49648.f91b69c"}]}],"out":[{"x":490,"y":148,"wires":[{"id":"76c4aa0e.893b54","port":1}]},{"x":489,"y":95,"wires":[{"id":"76c4aa0e.893b54","port":0}]}]},{"id":"baabe7c7.455418","type":"mqtt-broker","z":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"verifyservercert":true,"compatmode":true,"keepalive":"15","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""},{"id":"289ca9d6.d76356","type":"serial-port","z":"fa6f7682.059088","serialport":"/dev/ttyRH-USB","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","newline":"\\n","bin":"false","out":"char","addchar":false},{"id":"456943cc.ba96bc","type":"serial in","z":"fa6f7682.059088","name":"Response","serial":"289ca9d6.d76356","x":206,"y":101,"wires":[["76c4aa0e.893b54"]]},{"id":"944aee7a.6bb51","type":"serial out","z":"fa6f7682.059088","name":"Request","serial":"289ca9d6.d76356","x":372,"y":58,"wires":[]},{"id":"6e49648.f91b69c","type":"function","z":"fa6f7682.059088","name":"PA","func":"msg.payload = \"PA\\r\"; \nreturn msg;","outputs":1,"noerr":0,"x":200,"y":58,"wires":[["944aee7a.6bb51"]]},{"id":"76c4aa0e.893b54","type":"function","z":"fa6f7682.059088","name":"","func":"var s = msg.payload.replace(/>/g,'');\n\ns = s.split(\",\");\n\nvar msg1 = {payload: s[0].trim()};\nvar msg2 = {payload: s[1].trim()};\n\nreturn [msg1, msg2];","outputs":"2","noerr":0,"x":349,"y":101,"wires":[[],[]]},{"id":"a21df484.5de208","type":"subflow:fa6f7682.059088","z":"69a52aa4.965ad4","x":336,"y":198,"wires":[["231bc4a.fdce43c"],[]]},{"id":"b722ea11.48dd18","type":"mqtt out","z":"69a52aa4.965ad4","name":"Chart","topic":"/sensors","qos":"","retain":"","broker":"baabe7c7.455418","x":787,"y":175,"wires":[]},{"id":"29351ae7.d6cae6","type":"inject","z":"69a52aa4.965ad4","name":"Interval","topic":"","payload":"","payloadType":"date","repeat":"30","crontab":"","once":false,"x":189,"y":198,"wires":[["a21df484.5de208"]]},{"id":"65287cc9.9ad784","type":"chart tag","z":"69a52aa4.965ad4","title":"Temperature","chartType":"gauge","dataSource":"Local","units":"Â°C","min":"0","max":"100","targetLow":"","targetHigh":"","priority":"1","sourcePriority":"1","ttl":"5","points":"50","x":623,"y":156,"wires":[["b722ea11.48dd18"]]},{"id":"72864d9e.8d79b4","type":"chart tag","z":"69a52aa4.965ad4","title":"Humidity","chartType":"gauge","dataSource":"Local","units":"% RH","min":"0","max":"100","targetLow":"","targetHigh":"","priority":"2","sourcePriority":"1","ttl":"5","points":"50","x":609,"y":198,"wires":[["b722ea11.48dd18"]]},{"id":"f568fc32.0a97","type":"comment","z":"69a52aa4.965ad4","name":"Acquire from Sensor","info":"This flow acquires the temperature and humidity\nfrom the Omega RH-USB sensor, marks it up for\ncharting with the chart tag node, then sends it\nto the MQTT Out node for charting.\n\nSince the RH-USB returns the temperature in degrees\nFahrenheit, the flow includes a range node to \nconvert from Fahrenheit to Celcius. Double-click on\nthe \"F to C\" node to see how it works.","x":205,"y":156,"wires":[]},{"id":"231bc4a.fdce43c","type":"function","z":"69a52aa4.965ad4","name":"F to C","func":"function round(n, d) {\n    return Number(Math.round(n+'e'+d)+'e-'+d);\n}\n\nvar f = parseFloat(msg.payload);\nmsg.payload = round(((f - 32)*5/9), 1);\n\nreturn msg;\n","outputs":1,"noerr":0,"x":474,"y":156,"wires":[["65287cc9.9ad784"]]}]


